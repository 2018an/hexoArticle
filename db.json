{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/JVM运行时区域详解/index.md","hash":"d09c7aa4f334dc20327296eee8fa781202e6aae7","modified":1760405242827},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"06889bee30e4c39479467021da434d3a6a0990fc","modified":1760348213590},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"a93d7b3990e45bc7247eecf01888f71674887a63","modified":1760348213701},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1760348213710},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1760348213713},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1760348213706},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1760348213715},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1760348213717},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1760348213729},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1760348213725},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1760348213721},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1760348213731},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1760348213734},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1760348213740},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1760348213736},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1760348213742},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1760348213755},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1760348213751},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1760348213745},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1760348213762},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1760348213749},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1760348213759},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1760348213764},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1760348213766},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1760348213773},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1760348213768},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1760348213779},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1760348213781},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1760348213787},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1760348213781},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1760348213777},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1760348213784},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1760348213794},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1760348213792},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1760348213795},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"97160b8111dd0283f8231408bcab4c87d31c1646","modified":1760348213376},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"57281fc3812c877ec2d8e89ec87ede57b9789d4c","modified":1760348213438},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"97160b8111dd0283f8231408bcab4c87d31c1646","modified":1760348213327},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1760348213463},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1760348213469},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1760348213445},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"97160b8111dd0283f8231408bcab4c87d31c1646","modified":1760348213493},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1760348213553},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"1b89d0caba03a66a43d9c290a5e94fa438a89210","modified":1760348213226},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1760348213245},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"e9d4678e14be5e3cd5e34d783e5af6d6626092f5","modified":1760348213340},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"0039146b8ccbdf9b9f8bee58fc6c238f0e9921fc","modified":1760348213277},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1760348213417},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"0e94f5722d4c44d3cc91be2f4fd30b9ab503b868","modified":1760348213424},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1760348213410},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1760348213431},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1760348213393},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1760348213450},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1760348213477},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1760348213368},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1760348213474},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1760348213306},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1760348213488},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1760348213498},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1760348213609},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1760348213615},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1760348213697},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1760348213585},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1760348213165},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1760348213354},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1760348213400},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1760348213459},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1760348213502},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1760348213385},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1760348213622},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1760348213483},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"f608400a08cf137ab15ec1f44bac551950afe879","modified":1760348213627},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1760348213631},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1760348213648},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1760348213635},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1760348213658},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1760348213675},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1760348213685},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1760348213689},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1760347974637},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1760348213693},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1760348213642},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1760348213667},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1760348213074},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1760348213581},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1760348213571},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"6497b70356271fd6f9f1dc862353be844c457a53","modified":1760348213596},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1760348213547},{"_id":"public/2025/10/13/hello-world/index.html","hash":"7291040313e1ca1b0b6b3b8b722c2c60a374f936","modified":1760405336376},{"_id":"public/JVM运行时区域详解/index.html","hash":"7acd6b3a7572586937db21235742e2bc7a49e6fb","modified":1760405336376},{"_id":"public/archives/index.html","hash":"056ce3c18bd83f698bf5ce42ccfbd17d4f364d97","modified":1760405336376},{"_id":"public/archives/2025/index.html","hash":"05cd60f4be241663e1da811cd0df3fc1ae6960c8","modified":1760405336376},{"_id":"public/archives/2025/10/index.html","hash":"dc2b7a197575c85f1bcfcec996ba01fb37c6a98c","modified":1760405336376},{"_id":"public/index.html","hash":"ef839251e0d1142b261cfa07bc7990829a631661","modified":1760405336376},{"_id":"public/css/style.css","hash":"ecc329be740a220cc188ff49b02da4847cb7ee5e","modified":1760405336376},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1760405336376},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1760405336376},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1760405336376},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1760405336376},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1760405336376},{"_id":"source/_posts/JVM运行时区域详解.md","hash":"a0e6d36835fe3266d3f3433cf49718eb0918499d","modified":1760405557295},{"_id":"source/_posts/i++是线程安全的吗？.md","hash":"ef8bc87625ba67f4f8065f39f74e8c98bb15086e","modified":1760405815905}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2025-10-13T09:36:44.695Z","updated":"2025-10-13T09:32:54.637Z","comments":1,"layout":"post","photos":[],"_id":"cmgpvvv4a0001ggd423pyht6o","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"JVM运行时区域详解","date":"2025-10-14T01:30:25.000Z","_content":"\n我们知道的JVM内存区域有：堆和栈，这是一种泛的分法，也是按运行时区域的一种分法，堆是所有线程共享的一块区域，而栈是线程隔离的，每个线程互不共享。\n\n### 线程不共享区域\n\n每个线程的数据区域包括程序计数器、虚拟机栈和本地方法栈，它们都是在新线程创建时才创建的。\n\n\n##### 程序计数器（Program Counter Rerister）\n\n程序计数器区域一块内存较小的区域，它用于存储线程的每个执行指令，每个线程都有自己的程序计数器，此区域不会有内存溢出的情况。\n\n##### 虚拟机栈（VM Stack）\n\n虚拟机栈描述的是Java方法执行的内存模型，每个方法被执行的时候都会同时创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。\n\n##### 本地方法栈（Native Method Stack）\n\n本地方法栈用于支持本地方法（native标识的方法，即非Java语言实现的方法）。 　\n\n虚拟机栈和本地方法栈，当线程请求分配的栈容量超过JVM允许的最大容量时抛出StackOverflowError异常。\n\n线程不共享区域如下图绿色背景所示。\n\n![image](https://www.programcreek.com/wp-content/uploads/2013/04/JVM-runtime-data-area.jpg)\n\n### 线程共享区域\n\n线程共享区域包含：堆和方法区。\n\n##### 堆（Heap）\n\n堆是最常处理的区域，它存储在JVM启动时创建的数组和对象，JVM垃圾收集也主要是在堆上面工作。\n\n如果实际所需的堆超过了自动内存管理系统能提供的最大容量时抛出OutOfMemoryError异常。\n\n##### 方法区（Method Area）\n\n方法区是可供各条线程共享的运行时内存区域。存储了每一个类的结构信息，例如运行时常量池（Runtime Constant Pool）、字段和方法数据、构造函数和普通方法的字节码内容、还包括一些在类、实例、接口初始化时用到的特殊方法。\n\n当创建类和接口时，如果构造运行时常量池所需的内存空间超过了方法区所能提供的最大内存空间后就会抛出OutOfMemoryError\n\n##### 运行时常量池（Runtime Constant Pool）\n\n运行时常量池是方法区的一部分，每一个运行时常量池都分配在JVM的方法区中，在类和接口被加载到JVM后，对应的运行时常量池就被创建。运行时常量池是每一个类或接口的常量池（Constant_Pool）的运行时表现形式，它包括了若干种常量：编译器可知的数值字面量到必须运行期解析后才能获得的方法或字段的引用。\n\n如果方法区的内存空间不能满足内存分配请求，那Java虚拟机将抛出一个OutOfMemoryError异常。\n\n![image](https://www.programcreek.com/wp-content/uploads/2013/04/JVM-Stack.png)\n\n栈包含Frames，当调用方法时，Frame被推送到堆栈。一个Frame包含局部变量数组、操作数栈、常量池引用。\n","source":"_posts/JVM运行时区域详解.md","raw":"---\ntitle: JVM运行时区域详解\ndate: 2025-10-14 09:30:25\ntags: JAVA\n---\n\n我们知道的JVM内存区域有：堆和栈，这是一种泛的分法，也是按运行时区域的一种分法，堆是所有线程共享的一块区域，而栈是线程隔离的，每个线程互不共享。\n\n### 线程不共享区域\n\n每个线程的数据区域包括程序计数器、虚拟机栈和本地方法栈，它们都是在新线程创建时才创建的。\n\n\n##### 程序计数器（Program Counter Rerister）\n\n程序计数器区域一块内存较小的区域，它用于存储线程的每个执行指令，每个线程都有自己的程序计数器，此区域不会有内存溢出的情况。\n\n##### 虚拟机栈（VM Stack）\n\n虚拟机栈描述的是Java方法执行的内存模型，每个方法被执行的时候都会同时创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。\n\n##### 本地方法栈（Native Method Stack）\n\n本地方法栈用于支持本地方法（native标识的方法，即非Java语言实现的方法）。 　\n\n虚拟机栈和本地方法栈，当线程请求分配的栈容量超过JVM允许的最大容量时抛出StackOverflowError异常。\n\n线程不共享区域如下图绿色背景所示。\n\n![image](https://www.programcreek.com/wp-content/uploads/2013/04/JVM-runtime-data-area.jpg)\n\n### 线程共享区域\n\n线程共享区域包含：堆和方法区。\n\n##### 堆（Heap）\n\n堆是最常处理的区域，它存储在JVM启动时创建的数组和对象，JVM垃圾收集也主要是在堆上面工作。\n\n如果实际所需的堆超过了自动内存管理系统能提供的最大容量时抛出OutOfMemoryError异常。\n\n##### 方法区（Method Area）\n\n方法区是可供各条线程共享的运行时内存区域。存储了每一个类的结构信息，例如运行时常量池（Runtime Constant Pool）、字段和方法数据、构造函数和普通方法的字节码内容、还包括一些在类、实例、接口初始化时用到的特殊方法。\n\n当创建类和接口时，如果构造运行时常量池所需的内存空间超过了方法区所能提供的最大内存空间后就会抛出OutOfMemoryError\n\n##### 运行时常量池（Runtime Constant Pool）\n\n运行时常量池是方法区的一部分，每一个运行时常量池都分配在JVM的方法区中，在类和接口被加载到JVM后，对应的运行时常量池就被创建。运行时常量池是每一个类或接口的常量池（Constant_Pool）的运行时表现形式，它包括了若干种常量：编译器可知的数值字面量到必须运行期解析后才能获得的方法或字段的引用。\n\n如果方法区的内存空间不能满足内存分配请求，那Java虚拟机将抛出一个OutOfMemoryError异常。\n\n![image](https://www.programcreek.com/wp-content/uploads/2013/04/JVM-Stack.png)\n\n栈包含Frames，当调用方法时，Frame被推送到堆栈。一个Frame包含局部变量数组、操作数栈、常量池引用。\n","slug":"JVM运行时区域详解","published":1,"updated":"2025-10-14T01:32:37.295Z","_id":"cmgpvylr20000gkd4h4x9hmcv","comments":1,"layout":"post","photos":[],"content":"<p>我们知道的JVM内存区域有：堆和栈，这是一种泛的分法，也是按运行时区域的一种分法，堆是所有线程共享的一块区域，而栈是线程隔离的，每个线程互不共享。</p>\n<h3 id=\"线程不共享区域\"><a href=\"#线程不共享区域\" class=\"headerlink\" title=\"线程不共享区域\"></a>线程不共享区域</h3><p>每个线程的数据区域包括程序计数器、虚拟机栈和本地方法栈，它们都是在新线程创建时才创建的。</p>\n<h5 id=\"程序计数器（Program-Counter-Rerister）\"><a href=\"#程序计数器（Program-Counter-Rerister）\" class=\"headerlink\" title=\"程序计数器（Program Counter Rerister）\"></a>程序计数器（Program Counter Rerister）</h5><p>程序计数器区域一块内存较小的区域，它用于存储线程的每个执行指令，每个线程都有自己的程序计数器，此区域不会有内存溢出的情况。</p>\n<h5 id=\"虚拟机栈（VM-Stack）\"><a href=\"#虚拟机栈（VM-Stack）\" class=\"headerlink\" title=\"虚拟机栈（VM Stack）\"></a>虚拟机栈（VM Stack）</h5><p>虚拟机栈描述的是Java方法执行的内存模型，每个方法被执行的时候都会同时创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。</p>\n<h5 id=\"本地方法栈（Native-Method-Stack）\"><a href=\"#本地方法栈（Native-Method-Stack）\" class=\"headerlink\" title=\"本地方法栈（Native Method Stack）\"></a>本地方法栈（Native Method Stack）</h5><p>本地方法栈用于支持本地方法（native标识的方法，即非Java语言实现的方法）。 　</p>\n<p>虚拟机栈和本地方法栈，当线程请求分配的栈容量超过JVM允许的最大容量时抛出StackOverflowError异常。</p>\n<p>线程不共享区域如下图绿色背景所示。</p>\n<p><img src=\"https://www.programcreek.com/wp-content/uploads/2013/04/JVM-runtime-data-area.jpg\" alt=\"image\"></p>\n<h3 id=\"线程共享区域\"><a href=\"#线程共享区域\" class=\"headerlink\" title=\"线程共享区域\"></a>线程共享区域</h3><p>线程共享区域包含：堆和方法区。</p>\n<h5 id=\"堆（Heap）\"><a href=\"#堆（Heap）\" class=\"headerlink\" title=\"堆（Heap）\"></a>堆（Heap）</h5><p>堆是最常处理的区域，它存储在JVM启动时创建的数组和对象，JVM垃圾收集也主要是在堆上面工作。</p>\n<p>如果实际所需的堆超过了自动内存管理系统能提供的最大容量时抛出OutOfMemoryError异常。</p>\n<h5 id=\"方法区（Method-Area）\"><a href=\"#方法区（Method-Area）\" class=\"headerlink\" title=\"方法区（Method Area）\"></a>方法区（Method Area）</h5><p>方法区是可供各条线程共享的运行时内存区域。存储了每一个类的结构信息，例如运行时常量池（Runtime Constant Pool）、字段和方法数据、构造函数和普通方法的字节码内容、还包括一些在类、实例、接口初始化时用到的特殊方法。</p>\n<p>当创建类和接口时，如果构造运行时常量池所需的内存空间超过了方法区所能提供的最大内存空间后就会抛出OutOfMemoryError</p>\n<h5 id=\"运行时常量池（Runtime-Constant-Pool）\"><a href=\"#运行时常量池（Runtime-Constant-Pool）\" class=\"headerlink\" title=\"运行时常量池（Runtime Constant Pool）\"></a>运行时常量池（Runtime Constant Pool）</h5><p>运行时常量池是方法区的一部分，每一个运行时常量池都分配在JVM的方法区中，在类和接口被加载到JVM后，对应的运行时常量池就被创建。运行时常量池是每一个类或接口的常量池（Constant_Pool）的运行时表现形式，它包括了若干种常量：编译器可知的数值字面量到必须运行期解析后才能获得的方法或字段的引用。</p>\n<p>如果方法区的内存空间不能满足内存分配请求，那Java虚拟机将抛出一个OutOfMemoryError异常。</p>\n<p><img src=\"https://www.programcreek.com/wp-content/uploads/2013/04/JVM-Stack.png\" alt=\"image\"></p>\n<p>栈包含Frames，当调用方法时，Frame被推送到堆栈。一个Frame包含局部变量数组、操作数栈、常量池引用。</p>\n","excerpt":"","more":"<p>我们知道的JVM内存区域有：堆和栈，这是一种泛的分法，也是按运行时区域的一种分法，堆是所有线程共享的一块区域，而栈是线程隔离的，每个线程互不共享。</p>\n<h3 id=\"线程不共享区域\"><a href=\"#线程不共享区域\" class=\"headerlink\" title=\"线程不共享区域\"></a>线程不共享区域</h3><p>每个线程的数据区域包括程序计数器、虚拟机栈和本地方法栈，它们都是在新线程创建时才创建的。</p>\n<h5 id=\"程序计数器（Program-Counter-Rerister）\"><a href=\"#程序计数器（Program-Counter-Rerister）\" class=\"headerlink\" title=\"程序计数器（Program Counter Rerister）\"></a>程序计数器（Program Counter Rerister）</h5><p>程序计数器区域一块内存较小的区域，它用于存储线程的每个执行指令，每个线程都有自己的程序计数器，此区域不会有内存溢出的情况。</p>\n<h5 id=\"虚拟机栈（VM-Stack）\"><a href=\"#虚拟机栈（VM-Stack）\" class=\"headerlink\" title=\"虚拟机栈（VM Stack）\"></a>虚拟机栈（VM Stack）</h5><p>虚拟机栈描述的是Java方法执行的内存模型，每个方法被执行的时候都会同时创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。</p>\n<h5 id=\"本地方法栈（Native-Method-Stack）\"><a href=\"#本地方法栈（Native-Method-Stack）\" class=\"headerlink\" title=\"本地方法栈（Native Method Stack）\"></a>本地方法栈（Native Method Stack）</h5><p>本地方法栈用于支持本地方法（native标识的方法，即非Java语言实现的方法）。 　</p>\n<p>虚拟机栈和本地方法栈，当线程请求分配的栈容量超过JVM允许的最大容量时抛出StackOverflowError异常。</p>\n<p>线程不共享区域如下图绿色背景所示。</p>\n<p><img src=\"https://www.programcreek.com/wp-content/uploads/2013/04/JVM-runtime-data-area.jpg\" alt=\"image\"></p>\n<h3 id=\"线程共享区域\"><a href=\"#线程共享区域\" class=\"headerlink\" title=\"线程共享区域\"></a>线程共享区域</h3><p>线程共享区域包含：堆和方法区。</p>\n<h5 id=\"堆（Heap）\"><a href=\"#堆（Heap）\" class=\"headerlink\" title=\"堆（Heap）\"></a>堆（Heap）</h5><p>堆是最常处理的区域，它存储在JVM启动时创建的数组和对象，JVM垃圾收集也主要是在堆上面工作。</p>\n<p>如果实际所需的堆超过了自动内存管理系统能提供的最大容量时抛出OutOfMemoryError异常。</p>\n<h5 id=\"方法区（Method-Area）\"><a href=\"#方法区（Method-Area）\" class=\"headerlink\" title=\"方法区（Method Area）\"></a>方法区（Method Area）</h5><p>方法区是可供各条线程共享的运行时内存区域。存储了每一个类的结构信息，例如运行时常量池（Runtime Constant Pool）、字段和方法数据、构造函数和普通方法的字节码内容、还包括一些在类、实例、接口初始化时用到的特殊方法。</p>\n<p>当创建类和接口时，如果构造运行时常量池所需的内存空间超过了方法区所能提供的最大内存空间后就会抛出OutOfMemoryError</p>\n<h5 id=\"运行时常量池（Runtime-Constant-Pool）\"><a href=\"#运行时常量池（Runtime-Constant-Pool）\" class=\"headerlink\" title=\"运行时常量池（Runtime Constant Pool）\"></a>运行时常量池（Runtime Constant Pool）</h5><p>运行时常量池是方法区的一部分，每一个运行时常量池都分配在JVM的方法区中，在类和接口被加载到JVM后，对应的运行时常量池就被创建。运行时常量池是每一个类或接口的常量池（Constant_Pool）的运行时表现形式，它包括了若干种常量：编译器可知的数值字面量到必须运行期解析后才能获得的方法或字段的引用。</p>\n<p>如果方法区的内存空间不能满足内存分配请求，那Java虚拟机将抛出一个OutOfMemoryError异常。</p>\n<p><img src=\"https://www.programcreek.com/wp-content/uploads/2013/04/JVM-Stack.png\" alt=\"image\"></p>\n<p>栈包含Frames，当调用方法时，Frame被推送到堆栈。一个Frame包含局部变量数组、操作数栈、常量池引用。</p>\n"},{"title":"i++是线程安全的吗?","date":"2025-10-14T01:33:33.000Z","_content":"\n![](http://img.javastack.cn/18-6-8/12258861.jpg)\n\n**i++ 是线程安全的吗？**\n\n相信很多中高级的 Java 面试者都遇到过这个问题，很多对这个不是很清楚的肯定是一脸蒙逼。内心肯定还在质疑，i++ 居然还有线程安全问题？只能说自己了解的不够多，自己的水平有限。\n\n先来看下面的示例来验证下 i++ 到底是不是线程安全的。\n\n**1000个线程，每个线程对共享变量 count 进行 1000 次 ++ 操作。**\n\n```\nstatic int count = 0;\n\nstatic CountDownLatch cdl = new CountDownLatch(1000);\n\n/**\n* 微信公众号：Java技术栈\n*/\npublic static void main(String[] args) throws Exception {\n\tCountRunnable countRunnable = new CountRunnable();\n\tfor (int i = 0; i < 1000; i++) {\n\t\tnew Thread(countRunnable).start();\n\t}\n\tcdl.await();\n\tSystem.out.println(count);\n}\n\nstatic class CountRunnable implements Runnable {\n\n\tprivate void count() {\n\t\tfor (int i = 0; i < 1000; i++) {\n\t\t\tcount++;\n\t\t}\n\t}\n\n\t@Override\n\tpublic void run() {\n\t\tcount();\n\t\tcdl.countDown();\n\t}\n\n}\n```\n\n上面的例子我们期望的结果应该是 1000000，但运行 N 遍，你会发现总是不为 1000000，至少你现在知道了 i++ 操作它不是线程安全的了。\n\n先来看 JMM 模型中对共享变量的读写原理吧。\n\n![](http://img.javastack.cn/18-6-8/60972585.jpg)\n\n每个线程都有自己的工作内存，每个线程需要对共享变量操作时必须先把共享变量从主内存 load 到自己的工作内存，等完成对共享变量的操作时再 save 到主内存。\n\n问题就出在这了，如果一个线程运算完后还没刷到主内存，此时这个共享变量的值被另外一个线程从主内存读取到了，这个时候读取的数据就是脏数据了，它会覆盖其他线程计算完的值。。。\n\n**这也是经典的内存不可见问题，那么把 count 加上 volatile 让内存可见是否能解决这个问题呢？** 答案是：不能。因为 volatile 只能保证可见性，不能保证原子性。多个线程同时读取这个共享变量的值，就算保证其他线程修改的可见性，也不能保证线程之间读取到同样的值然后相互覆盖对方的值的情况。\n\n关于多线程的几种关键概念请翻阅《[多线程之原子性、可见性、有序性详解](https://mp.weixin.qq.com/s/DWaxnysIQ8NSWN1NME_HvA)》这篇文章。\n\n#### 解决方案\n\n说了这么多，对于 i++ 这种线程不安全问题有没有其他解决方案呢？当然有，请参考以下几种解决方案。\n\n1、对 i++ 操作的方法加同步锁，同时只能有一个线程执行 i++ 操作；\n\n2、使用支持原子性操作的类，如 `java.util.concurrent.atomic.AtomicInteger`，它使用的是 CAS 算法，效率优于第 1 种；\n\n如果对你有帮助，点个赞分享下给个鼓励吧！\n","source":"_posts/i++是线程安全的吗？.md","raw":"---\ntitle: i++是线程安全的吗?\ndate: 2025-10-14 09:33:33\ntags: JAVA\n---\n\n![](http://img.javastack.cn/18-6-8/12258861.jpg)\n\n**i++ 是线程安全的吗？**\n\n相信很多中高级的 Java 面试者都遇到过这个问题，很多对这个不是很清楚的肯定是一脸蒙逼。内心肯定还在质疑，i++ 居然还有线程安全问题？只能说自己了解的不够多，自己的水平有限。\n\n先来看下面的示例来验证下 i++ 到底是不是线程安全的。\n\n**1000个线程，每个线程对共享变量 count 进行 1000 次 ++ 操作。**\n\n```\nstatic int count = 0;\n\nstatic CountDownLatch cdl = new CountDownLatch(1000);\n\n/**\n* 微信公众号：Java技术栈\n*/\npublic static void main(String[] args) throws Exception {\n\tCountRunnable countRunnable = new CountRunnable();\n\tfor (int i = 0; i < 1000; i++) {\n\t\tnew Thread(countRunnable).start();\n\t}\n\tcdl.await();\n\tSystem.out.println(count);\n}\n\nstatic class CountRunnable implements Runnable {\n\n\tprivate void count() {\n\t\tfor (int i = 0; i < 1000; i++) {\n\t\t\tcount++;\n\t\t}\n\t}\n\n\t@Override\n\tpublic void run() {\n\t\tcount();\n\t\tcdl.countDown();\n\t}\n\n}\n```\n\n上面的例子我们期望的结果应该是 1000000，但运行 N 遍，你会发现总是不为 1000000，至少你现在知道了 i++ 操作它不是线程安全的了。\n\n先来看 JMM 模型中对共享变量的读写原理吧。\n\n![](http://img.javastack.cn/18-6-8/60972585.jpg)\n\n每个线程都有自己的工作内存，每个线程需要对共享变量操作时必须先把共享变量从主内存 load 到自己的工作内存，等完成对共享变量的操作时再 save 到主内存。\n\n问题就出在这了，如果一个线程运算完后还没刷到主内存，此时这个共享变量的值被另外一个线程从主内存读取到了，这个时候读取的数据就是脏数据了，它会覆盖其他线程计算完的值。。。\n\n**这也是经典的内存不可见问题，那么把 count 加上 volatile 让内存可见是否能解决这个问题呢？** 答案是：不能。因为 volatile 只能保证可见性，不能保证原子性。多个线程同时读取这个共享变量的值，就算保证其他线程修改的可见性，也不能保证线程之间读取到同样的值然后相互覆盖对方的值的情况。\n\n关于多线程的几种关键概念请翻阅《[多线程之原子性、可见性、有序性详解](https://mp.weixin.qq.com/s/DWaxnysIQ8NSWN1NME_HvA)》这篇文章。\n\n#### 解决方案\n\n说了这么多，对于 i++ 这种线程不安全问题有没有其他解决方案呢？当然有，请参考以下几种解决方案。\n\n1、对 i++ 操作的方法加同步锁，同时只能有一个线程执行 i++ 操作；\n\n2、使用支持原子性操作的类，如 `java.util.concurrent.atomic.AtomicInteger`，它使用的是 CAS 算法，效率优于第 1 种；\n\n如果对你有帮助，点个赞分享下给个鼓励吧！\n","slug":"i++是线程安全的吗？","published":1,"updated":"2025-10-14T01:36:55.905Z","comments":1,"layout":"post","photos":[],"_id":"cmgpw6zh90000fwd47fbh55qf","content":"<p><img src=\"http://img.javastack.cn/18-6-8/12258861.jpg\"></p>\n<p><strong>i++ 是线程安全的吗？</strong></p>\n<p>相信很多中高级的 Java 面试者都遇到过这个问题，很多对这个不是很清楚的肯定是一脸蒙逼。内心肯定还在质疑，i++ 居然还有线程安全问题？只能说自己了解的不够多，自己的水平有限。</p>\n<p>先来看下面的示例来验证下 i++ 到底是不是线程安全的。</p>\n<p><strong>1000个线程，每个线程对共享变量 count 进行 1000 次 ++ 操作。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static int count = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">static CountDownLatch cdl = new CountDownLatch(1000);</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* 微信公众号：Java技术栈</span><br><span class=\"line\">*/</span><br><span class=\"line\">public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">\tCountRunnable countRunnable = new CountRunnable();</span><br><span class=\"line\">\tfor (int i = 0; i &lt; 1000; i++) &#123;</span><br><span class=\"line\">\t\tnew Thread(countRunnable).start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcdl.await();</span><br><span class=\"line\">\tSystem.out.println(count);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static class CountRunnable implements Runnable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate void count() &#123;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; 1000; i++) &#123;</span><br><span class=\"line\">\t\t\tcount++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void run() &#123;</span><br><span class=\"line\">\t\tcount();</span><br><span class=\"line\">\t\tcdl.countDown();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子我们期望的结果应该是 1000000，但运行 N 遍，你会发现总是不为 1000000，至少你现在知道了 i++ 操作它不是线程安全的了。</p>\n<p>先来看 JMM 模型中对共享变量的读写原理吧。</p>\n<p><img src=\"http://img.javastack.cn/18-6-8/60972585.jpg\"></p>\n<p>每个线程都有自己的工作内存，每个线程需要对共享变量操作时必须先把共享变量从主内存 load 到自己的工作内存，等完成对共享变量的操作时再 save 到主内存。</p>\n<p>问题就出在这了，如果一个线程运算完后还没刷到主内存，此时这个共享变量的值被另外一个线程从主内存读取到了，这个时候读取的数据就是脏数据了，它会覆盖其他线程计算完的值。。。</p>\n<p><strong>这也是经典的内存不可见问题，那么把 count 加上 volatile 让内存可见是否能解决这个问题呢？</strong> 答案是：不能。因为 volatile 只能保证可见性，不能保证原子性。多个线程同时读取这个共享变量的值，就算保证其他线程修改的可见性，也不能保证线程之间读取到同样的值然后相互覆盖对方的值的情况。</p>\n<p>关于多线程的几种关键概念请翻阅《<a href=\"https://mp.weixin.qq.com/s/DWaxnysIQ8NSWN1NME_HvA\">多线程之原子性、可见性、有序性详解</a>》这篇文章。</p>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>说了这么多，对于 i++ 这种线程不安全问题有没有其他解决方案呢？当然有，请参考以下几种解决方案。</p>\n<p>1、对 i++ 操作的方法加同步锁，同时只能有一个线程执行 i++ 操作；</p>\n<p>2、使用支持原子性操作的类，如 <code>java.util.concurrent.atomic.AtomicInteger</code>，它使用的是 CAS 算法，效率优于第 1 种；</p>\n<p>如果对你有帮助，点个赞分享下给个鼓励吧！</p>\n","excerpt":"","more":"<p><img src=\"http://img.javastack.cn/18-6-8/12258861.jpg\"></p>\n<p><strong>i++ 是线程安全的吗？</strong></p>\n<p>相信很多中高级的 Java 面试者都遇到过这个问题，很多对这个不是很清楚的肯定是一脸蒙逼。内心肯定还在质疑，i++ 居然还有线程安全问题？只能说自己了解的不够多，自己的水平有限。</p>\n<p>先来看下面的示例来验证下 i++ 到底是不是线程安全的。</p>\n<p><strong>1000个线程，每个线程对共享变量 count 进行 1000 次 ++ 操作。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static int count = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">static CountDownLatch cdl = new CountDownLatch(1000);</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* 微信公众号：Java技术栈</span><br><span class=\"line\">*/</span><br><span class=\"line\">public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">\tCountRunnable countRunnable = new CountRunnable();</span><br><span class=\"line\">\tfor (int i = 0; i &lt; 1000; i++) &#123;</span><br><span class=\"line\">\t\tnew Thread(countRunnable).start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcdl.await();</span><br><span class=\"line\">\tSystem.out.println(count);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static class CountRunnable implements Runnable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate void count() &#123;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; 1000; i++) &#123;</span><br><span class=\"line\">\t\t\tcount++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void run() &#123;</span><br><span class=\"line\">\t\tcount();</span><br><span class=\"line\">\t\tcdl.countDown();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子我们期望的结果应该是 1000000，但运行 N 遍，你会发现总是不为 1000000，至少你现在知道了 i++ 操作它不是线程安全的了。</p>\n<p>先来看 JMM 模型中对共享变量的读写原理吧。</p>\n<p><img src=\"http://img.javastack.cn/18-6-8/60972585.jpg\"></p>\n<p>每个线程都有自己的工作内存，每个线程需要对共享变量操作时必须先把共享变量从主内存 load 到自己的工作内存，等完成对共享变量的操作时再 save 到主内存。</p>\n<p>问题就出在这了，如果一个线程运算完后还没刷到主内存，此时这个共享变量的值被另外一个线程从主内存读取到了，这个时候读取的数据就是脏数据了，它会覆盖其他线程计算完的值。。。</p>\n<p><strong>这也是经典的内存不可见问题，那么把 count 加上 volatile 让内存可见是否能解决这个问题呢？</strong> 答案是：不能。因为 volatile 只能保证可见性，不能保证原子性。多个线程同时读取这个共享变量的值，就算保证其他线程修改的可见性，也不能保证线程之间读取到同样的值然后相互覆盖对方的值的情况。</p>\n<p>关于多线程的几种关键概念请翻阅《<a href=\"https://mp.weixin.qq.com/s/DWaxnysIQ8NSWN1NME_HvA\">多线程之原子性、可见性、有序性详解</a>》这篇文章。</p>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>说了这么多，对于 i++ 这种线程不安全问题有没有其他解决方案呢？当然有，请参考以下几种解决方案。</p>\n<p>1、对 i++ 操作的方法加同步锁，同时只能有一个线程执行 i++ 操作；</p>\n<p>2、使用支持原子性操作的类，如 <code>java.util.concurrent.atomic.AtomicInteger</code>，它使用的是 CAS 算法，效率优于第 1 种；</p>\n<p>如果对你有帮助，点个赞分享下给个鼓励吧！</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cmgpvylr20000gkd4h4x9hmcv","tag_id":"cmgpw0kww0001gkd4d0bfbccu","_id":"cmgpw0kwx0002gkd49ctt0jqz"},{"post_id":"cmgpw6zh90000fwd47fbh55qf","tag_id":"cmgpw0kww0001gkd4d0bfbccu","_id":"cmgpw6zha0001fwd4b36x1mh6"}],"Tag":[{"name":"JAVA","_id":"cmgpw0kww0001gkd4d0bfbccu"}]}}